<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<munit:config name="user-creation" />
	<munit:test name="post:\v1\users\user|positive-scenario" doc:id="472a79c7-a037-427e-a308-e4a7417dc8ba" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Get User by Username" doc:id="c02cd2ec-20b6-4040-b0f2-a736bc557550" processor="db:query-single">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get User by Username" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#['']" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Invoke Create User Stored Procedure" doc:id="efad5e33-7742-4f01-9734-475f56ce231a" processor="db:stored-procedure">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Invoke Create User Stored Procedure" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[1]" />
					<munit-tools:variables >
						<munit-tools:variable key="httpStatus" value="#[201]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Incoming Event" doc:id="3493a84c-1424-4a3d-83b7-5e0dabbdd58a" >
				<munit:payload value="#[MunitTools::getResourceAsString('user/creation/post-user-success-request-example.json')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="post:\v1\users\user:application\json:jy-deloitte-exam-db-sys-api-config" doc:id="163f3ca4-77cd-4fa0-b73c-7f41ec324742" name="post:\v1\users\user:application\json:jy-deloitte-exam-db-sys-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert Response Message" doc:id="41ad8846-31a7-4cd8-99e5-2b2f9fff6a30" actual="#[payload.message]" expected="#['Username: jeromevyabut has been successfully created.']"/>
			<munit-tools:assert-equals doc:name="Assert Http Status Code" doc:id="e420dc80-7cf7-4432-9dfe-0c7c3fd4722e" actual="#[vars.httpStatus]" expected="#[201]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\v1\users\user|negative-scenario-user-already-exist" doc:id="68079622-6694-4df6-b689-2c6189ff3e6c" description="Test" expectedErrorType="USER:ALREADY_EXIST" expectedErrorDescription="Username:jeromevyabut already exist.">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Get User by Username" doc:id="ad3f7efc-302d-4d81-9cc7-ef36f285b377" processor="db:query-single">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get User by Username" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('user/creation/get-user-by-username-response-example.json')]" mediaType="application/java" />
					<munit-tools:variables >
						<munit-tools:variable key="httpStatus" value="#[400]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Incoming Event" doc:id="7dc18230-e3dc-4af2-b953-fe0929ecfd00" >
				<munit:payload value="#[MunitTools::getResourceAsString('user/creation/post-user-success-request-example.json')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="post:\v1\users\user:application\json:jy-deloitte-exam-db-sys-api-config" doc:id="33420a16-169d-4dc5-97e0-04c6510097f4" name="post:\v1\users\user:application\json:jy-deloitte-exam-db-sys-api-config"/>
		</munit:execution>
	</munit:test>
	<munit:test name="post:\v1\users\user|db-connectivity-issue" doc:id="9d93261c-6252-433a-8c9a-7f8fde193d5b" description="Test" expectedErrorType="DB:CONNECTIVITY">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Get User by Username DB Connectivity Error" doc:id="327b4399-24b9-47b8-a77c-4f92e19639ba" processor="db:query-single">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get User by Username" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('user/creation/get-user-by-username-response-example.json')]" mediaType="application/java" />
					<munit-tools:error typeId="DB:CONNECTIVITY" />
					<munit-tools:variables >
						<munit-tools:variable key="httpStatus" value="#[400]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			

</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Incoming Event" doc:id="93e3dae7-ebd9-4214-9fa5-427bb26f2e81" >
				<munit:payload value="#[MunitTools::getResourceAsString('user/creation/post-user-success-request-example.json')]" mediaType="application/json" />
			</munit:set-event>
			<flow-ref doc:name="post:\v1\users\user:application\json:jy-deloitte-exam-db-sys-api-config" doc:id="b0a3a931-d9d4-4c9b-ad48-699e25ba6921" name="post:\v1\users\user:application\json:jy-deloitte-exam-db-sys-api-config"/>
		</munit:execution>
	</munit:test>
</mule>
